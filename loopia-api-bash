#!/usr/bin/env bash

source $HOME/.secrets/loopia-api

api_loopia_url="https://api.loopia.se/RPCSERV"

### addSubdomain ###
#    args: domain subdomain
# example: addSubdomain example.com www 
#  output: "OK" || ""

addSubdomain () {
        curl -s -H 'Content-Type: text/xml' -d \
                "<methodCall><methodName>addSubdomain</methodName>\
                        <params><param><value><string>$api_loopia_user</string></value></param>\
                        <param><value><string>$api_loopia_pass</string></value></param>\
                        <param><value><string>$1</string></value></param>\
                        <param><value><string>$2</string></value></param></params>\
                </methodCall>" $api_loopia_url \
                | xmllint --xpath "//methodResponse/params/param/value/string/text()" - 2>/dev/null
}


### addZoneRecord ###
#    args: domain subdomain type ttl rdata
# example: addZoneRecord example.com www A 3600 93.184.216.34
# example: addZoneRecord example.com www TXT 600 "this is an example string"
#  output: "OK" || ""

addZoneRecord () {
        curl -s -H 'Content-Type: text/xml' -d \
                "<methodCall><methodName>addZoneRecord</methodName>\
                        <params>\
                                <param><value><string>$api_loopia_user</string></value></param>\
                                <param><value><string>$api_loopia_pass</string></value></param>\
                                <param><value><string>$1</string></value></param>\
                                <param><value><string>$2</string></value></param>\
                                <param><value><struct>\
                                        <member><name>type</name><value><string>$3</string></value></member>\
                                        <member><name>ttl</name><value><int>$4</int></value></member>\
                                        <member><name>priority</name><value><int>50</int></value></member>\
                                        <member><name>rdata</name><value><string>$5</string></value></member>\
                                </struct></value></param>\
                        </params>\
                </methodCall>" $api_loopia_url \
                | xmllint --xpath "//methodResponse/params/param/value/string/text()" - 2>/dev/null
}


### domainIsFree ###
#    args: domain
# example: domainIsFree example.com
#  output: "OK" || "DOMAIN_OCCUPIED"

domainIsFree () {
        curl -s -H 'Content-Type: text/xml' -d \
                "<methodCall><methodName>domainIsFree</methodName>\
                        <params>\
                                <param><value><string>$api_loopia_user</string></value></param>\
                                <param><value><string>$api_loopia_pass</string></value></param>\
                                <param><value><string>$1</string></value></param>\
                        </params>\
                </methodCall>" $api_loopia_url \
                | xmllint --xpath "//methodResponse/params/param/value/string/text()" -
}

### getZoneRecords ###
#    args: domain subdomain
# example: getZoneRecords
#  output:

getZoneRecords () {
        curl -s -H 'Content-Type: text/xml' -H 'Charset: utf-8' -d \
                "<methodCall><methodName>getZoneRecords</methodName>\
                        <params>\
                                <param><value><string>$api_loopia_user</string></value></param>\
                                <param><value><string>$api_loopia_pass</string></value></param>\
                                <param><value><string>$1</string></value></param>\
                                <param><value><string>$2</string></value></param>\
                        </params>\
                </methodCall>" $api_loopia_url \
		| xmllint --format --xpath "//methodResponse" - \
		| grep -Po "(?<=<name>).*?(?=</value>)" \
		| sed -e 's/<\/name><value>/\ /g' \
			-e 's/<string>/\ /g' \
			-e's/<int>/\ /g' \
			-e 's/<\/string>/\ /g' \
			-e 's/<\/int>/\ /g' \
		| while read l1; read l2; read l3; read l4; read l5; do
			echo -e "$l1\n$l2\n$l3\n$l4\n$l5" | sort -r
		done
}

### getCreditsAmount ###
#    args: [0|1]
# example: getZoneRecords 0
#  output: double
#    info: 0 for amount without VAT, 1 for amount including VAT (default if not given argument)

getCreditsAmount () {
	local vat="${1:-1}"
        curl -s -H 'Content-Type: text/xml' -d \
                "<methodCall><methodName>getCreditsAmount</methodName>\
                        <params>\
                                <param><value><string>$api_loopia_user</string></value></param>\
                                <param><value><string>$api_loopia_pass</string></value></param>\
                                <param><value><string>$vat</string></value></param>\
                        </params>\
                </methodCall>" $api_loopia_url \
                | xmllint --xpath "//methodResponse/params/param/value/double/text()" -
}


### getDomain ###
#    args: domain
# example: getDomain example.com
#  output: 

getDomain () {
        curl -s -H 'Content-Type: text/xml' -d \
                "<methodCall><methodName>getDomain</methodName>\
                        <params>\
                                <param><value><string>$api_loopia_user</string></value></param>\
                                <param><value><string>$api_loopia_pass</string></value></param>\
                                <param><value><string>$1</string></value></param>\
                        </params>\
                </methodCall>" $api_loopia_url \
		| xmllint --format --xpath "//methodResponse" - \
		| grep -Po "(?<=<name>).*?(?=</value>)" \
		| sed -e 's/<\/name><value>/\ /g' \
			-e 's/<string>/\ /g' \
			-e's/<int>/\ /g' \
			-e 's/<\/string>/\ /g' \
			-e 's/<\/int>/\ /g' \
		| awk '{print $1" "$2}' \
		| while read l1; read l2; read l3; read l4; read l5; read l6; do
			echo -e "$l1\n$l2\n$l3\n$l4\n$l5\n$l6" | sort -r
		done
}

### getDomains ###
#    args:
# example: getDomains
#  output:

getDomains () {
        curl -s -H 'Content-Type: text/xml' -H 'Charset: utf-8' -d \
                "<methodCall><methodName>getDomains</methodName>\
                        <params>\
                                <param><value><string>$api_loopia_user</string></value></param>\
                                <param><value><string>$api_loopia_pass</string></value></param>\
                        </params>\
                </methodCall>" $api_loopia_url \
		| xmllint --format --xpath "//methodResponse" - \
		| grep -Po "(?<=<name>).*?(?=</value>)" \
		| sed -e 's/<\/name><value>/\ /g' \
			-e 's/<string>/\ /g' \
			-e's/<int>/\ /g' \
			-e 's/<\/string>/\ /g' \
			-e 's/<\/int>/\ /g' \
		| while read l1; read l2; read l3; read l4; read l5; read l6; do
			echo -e "$l1\n$l2\n$l3\n$l4\n$l5\n$l6" | sort
		done
}

### getInvoice ###
#    args: reference_no
# example: getInvoice 123123123 0
#  output:
# Safe to use.
# Get invoice number with getUnpaidInvoices.

getInvoice () {
	local vat="${1:-1}"
        curl -s -H 'Content-Type: text/xml' -H 'Charset: utf-8' -d \
                "<methodCall><methodName>getInvoice</methodName>\
                        <params>\
                                <param><value><string>$api_loopia_user</string></value></param>\
                                <param><value><string>$api_loopia_pass</string></value></param>\
                                <param><value><string>$1</string></value></param>\
                                <param><value><boolean>$vat</boolean></value></param>\
                        </params>\
                </methodCall>" $api_loopia_url \
		| xmllint --format --xpath "//methodResponse" - \
		| grep -Po "(?<=<name>).*?(?=</value>)" \
		| sed \
			-e 's/<name>/\ /g' \
			-e 's/<array>/\ /g' \
			-e 's/<struct>/\ /g' \
			-e 's/<data>/\ /g' \
			-e 's/<member>/\ /g' \
			-e 's/<value>/\ /g' \
			-e 's/<items>/\ /g' \
			-e 's/<string>/\ /g' \
			-e 's/<double>/\ /g' \
			-e 's/<int>/\ /g' \
			-e 's/<boolean>/\ /g' \
			-e 's/<\/name>/\ /g' \
			-e 's/<\/array>/\ /g' \
			-e 's/<\/struct>/\ /g' \
			-e 's/<\/data>/\ /g' \
			-e 's/<\/member>/\ /g' \
			-e 's/<\/value>/\ /g' \
			-e 's/<\/items>/\ /g' \
			-e 's/<\/string>/\ /g' \
			-e 's/<\/double>/\ /g' \
			-e 's/<\/int>/\ /g' \
			-e 's/<\/boolean>/\ /g' \
			| grep -v 'items' \
			| grep -v 'vat' \
		| while read l1; read l2; read l3; read l4; read l5; read l6; read l7; read l8; read l9; read l10; do
			echo -e "$l1\n$l2\n$l3\n$l4\n$l5\n$l6\n$l7\n$l8\n$l9\n$l10" | sort
		done
}

### getUnpaidInvoices ###
#    args:
# example: getUnpaidInvoices
#  output:
# Unsafe.
# Have no idea how it would handle severla unpaid invoives. Works fine when there is only one single.

getUnpaidInvoices () {
	local vat="${1:-1}"
        curl -s -H 'Content-Type: text/xml' -H 'Charset: utf-8' -d \
                "<methodCall><methodName>getUnpaidInvoices</methodName>\
                        <params>\
                                <param><value><string>$api_loopia_user</string></value></param>\
                                <param><value><string>$api_loopia_pass</string></value></param>\
                                <param><value><boolean>$vat</boolean></value></param>\
                        </params>\
                </methodCall>" $api_loopia_url \
		| xmllint --format --xpath "//methodResponse" - \
		| grep -Po "(?<=<name>).*?(?=</value>)" \
		| sed \
			-e 's/<name>/\ /g' \
			-e 's/<array>/\ /g' \
			-e 's/<struct>/\ /g' \
			-e 's/<data>/\ /g' \
			-e 's/<member>/\ /g' \
			-e 's/<value>/\ /g' \
			-e 's/<items>/\ /g' \
			-e 's/<string>/\ /g' \
			-e 's/<double>/\ /g' \
			-e 's/<int>/\ /g' \
			-e 's/<boolean>/\ /g' \
			-e 's/<\/name>/\ /g' \
			-e 's/<\/array>/\ /g' \
			-e 's/<\/struct>/\ /g' \
			-e 's/<\/data>/\ /g' \
			-e 's/<\/member>/\ /g' \
			-e 's/<\/value>/\ /g' \
			-e 's/<\/items>/\ /g' \
			-e 's/<\/string>/\ /g' \
			-e 's/<\/double>/\ /g' \
			-e 's/<\/int>/\ /g' \
			-e 's/<\/boolean>/\ /g' \
		| while read l1; read l2; read l3; read l4; read l5; read l6; do
			echo -e "$l1\n$l2\n$l3\n$l4\n$l5\n$l6" | sort
		done
}

### payInvoiceUsingCredits ###
#    args: reference_no
# example: payInvoiceUsingCredits 123123123
#  output: OK || INSUFFICIENT_FUNDS || UNKNOWN_ERROR

payInvoiceUsingCredits () {
        curl -s -H 'Content-Type: text/xml' -H 'Charset: utf-8' -d \
                "<methodCall><methodName>payInvoiceUsingCredist</methodName>\
                        <params>\
                                <param><value><string>$api_loopia_user</string></value></param>\
                                <param><value><string>$api_loopia_pass</string></value></param>\
                                <param><value><string>$1</string></value></param>\
                        </params>\
                </methodCall>" $api_loopia_url \
		| xmllint --format --xpath "//methodResponse" - \
		| grep -Po "(?<=<name>).*?(?=</value>)" \
		| sed -e 's/<\/name><value>/\ /g' \
			-e 's/<string>/\ /g' \
			-e's/<int>/\ /g' \
			-e 's/<\/string>/\ /g' \
			-e 's/<\/int>/\ /g' \
		| while read l1; read l2; read l3; read l4; read l5; read l6; do
			echo -e "$l1\n$l2\n$l3\n$l4\n$l5\n$l6" | sort
		done
}

### removeZoneRecord ###
#    args: domain subdomain recprd_id
# example: removeZoneRecord example.com www 123123123
#  output: "OK" || "UNKNOWN_ERROR"

removeZoneRecord () {
        curl -s -H 'Content-Type: text/xml' -H 'Charset: utf-8' -d \
                "<methodCall><methodName>removeZoneRecord</methodName>\
                        <params>\
                                <param><value><string>$api_loopia_user</string></value></param>\
                                <param><value><string>$api_loopia_pass</string></value></param>\
                                <param><value><string>$1</string></value></param>\
                                <param><value><string>$2</string></value></param>\
                                <param><value><int>$3</int></value></param>\
                        </params>\
                </methodCall>" $api_loopia_url \
		| xmllint --format --xpath "//methodResponse" - \
		| grep -Po "(?<=<name>).*?(?=</value>)" \
		| sed -e 's/<\/name><value>/\ /g' \
			-e 's/<string>/\ /g' \
			-e's/<int>/\ /g' \
			-e 's/<\/string>/\ /g' \
			-e 's/<\/int>/\ /g' \
		| while read l1; read l2; read l3; read l4; read l5; read l6; do
			echo -e "$l1\n$l2\n$l3\n$l4\n$l5\n$l6" | sort
		done
}
